<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<# /**********************************************/ #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<# /**********************************************/ #>
<#@ output extension=".cs" #>
<#
    var settingsPath = this.Host.ResolvePath($"Configuration.json");
    var settingsJson = File.ReadAllText(settingsPath);
    var configuration = JObject.Parse(settingsJson);
#>
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.CompilerServices;

namespace System.Measurements {
    public partial class Dimension {
<#  foreach (JObject dimension in configuration["Dimensions"]) { 
        var symbol = dimension.Value<string>("Symbol")[0];
        var textID = dimension.Value<string>("Name");
#>
        public static Dimension <#= textID #> = 
            new Dimension("<#= textID #>", '<#= symbol #>');
<# } #>
    }

<#  foreach (JProperty measurement in configuration["Measurements"]) {
        var baseUnit = measurement.Value["Units"]?.FirstOrDefault().Value<string>("Plural");
#>
    public partial struct <#= measurement.Name #> : IMeasurement<<#= measurement.Name #>> {
        public string Name => "<#= measurement.Name #>";

        public IReadOnlyDictionary<char, int> Dimensions => 
            new Dictionary<char, int> {
<#          foreach (JProperty dimension in measurement.Value["Dimensions"]) { #>
                ['<#= dimension.Name #>'] = <#= dimension.Value #>,
<#          } #>
        };

        public <#= baseUnit #> GetBaseUnit() =>
            default;

        IPhysicalUnit<<#= measurement.Name #>> IMeasurement<<#= measurement.Name #>>.GetBaseUnit() =>
            default(<#= baseUnit #>);

<#      foreach (JObject unit in measurement.Value["Units"]) {
            var plural = unit.Value<string>("Plural");
        #>
        public static <#= plural #> <#= plural #>() => default;
        public static Affine1<<#= plural #>> <#= plural #>(double value) => new Affine1<<#= plural #>>(value, <#= plural #>.Instance);
            
<#      } #>
    }

<#      foreach (JObject unit in measurement.Value["Units"]) { 
            var name = unit.Value<string>("Name");
            var plural = unit.Value<string>("Plural");            
            var toBase = unit["ToBase"];
            var conversion = unit["ToBase"]?.AsJEnumerable<JToken>()?.Select(a => (double)a)?.ToArray();

            if (conversion == null) {
                conversion = new double[4] { 1.0, 0.0, 0.0, 1.0 };
            }
#>
    public struct <#= plural #> : IPhysicalUnit<<#= measurement.Name #>> {
        private <#= plural #>() {}
        public static <#= plural #> Instance => new <#= plural #>();
        public string Name => "<#= name #>";
        public string Plural => "<#= plural #>";
        public IMeasurement<<#= measurement.Name #>> Measurement => <#= measurement.Name #>.Instance;
        // Round-trip doubles are being used, and so may not look exactly like the values found in JSON
        public LinearFractionalTransformation ToBase =>
            <#= toBase == null
                ? "LinearFractionalTransformation.Identity"
                : toBase is JValue d
                    ? $"new LinearFractionalTransformation({(double)d:G17})"
                    : !(toBase is JArray arr)
                    ? $@"throw new NotImplementedException(""Cannot use {toBase}"")"
                    : arr.Count switch {
                        0 => $"new LinearFractionalTransformation(0.0, 0.0, 0.0, 0.0)",
                        1 => $"new LinearFractionalTransformation({(double)arr[0]:G17})",
                        2 => $"new LinearFractionalTransformation({(double)arr[0]:G17}, {(double)arr[1]:G17})",
                        4 => $"new LinearFractionalTransformation({(double)arr[0]:G17}, {(double)arr[1]:G17}, {(double)arr[2]:G17}, {(double)arr[3]:G17}).Normalized",
                        _ => $@"throw new NotImplementedException(""Cannot use {toBase}"")"
                    } #>;

        public LinearFractionalTransformation FromBase =>
            <#= toBase == null
                ? "LinearFractionalTransformation.Identity"
                : toBase is JValue d2
                    ? $"new LinearFractionalTransformation({1.0 / (double)d2:G17})"
                    : !(toBase is JArray arr2)
                    ? $@"throw new NotImplementedException(""Cannot use {toBase}"")"
                    : arr2.Count switch {
                        0 => $"new LinearFractionalTransformation(0.0, 0.0, 0.0, 0.0)",
                        1 => $"new LinearFractionalTransformation({1.0 / (double)arr2[0]:G17})",
                        2 => $"new LinearFractionalTransformation(1.0, -({(double)arr2[1]:G17}), 0.0, {(double)arr2[0]:G17})",
                        4 => $"new LinearFractionalTransformation({(double)arr2[3]:G17}, -({(double)arr2[1]:G17}), -({(double)arr2[2]:G17}), {(double)arr2[0]:G17}).Normalized",
                        _ => $@"throw new NotImplementedException(""Cannot use {toBase}"")"
                    } #>;
    }
<#      } #>
<# } #>
}